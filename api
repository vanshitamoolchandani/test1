import asyncio
from fastapi import FastAPI, HTTPException, status
from pydantic import BaseModel

# Import your extractor functions
from utils.extract_data import (
    title_extractor,
    amendment_date_extractor,
    age_extractor,
    weight_extractor,
    participant_count_extractor,
    ratio_extractor
)

app = FastAPI(
    title="Protocol Document Extractor API",
    version="1.1.0"
)

class FilePathRequest(BaseModel):
    file_path: str

async def validate_file_path(path: str):
    """
    Ensure the given file path exists and is a .docx.
    """
    if not os.path.isfile(path):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"File not found: {path}"
        )
    if not path.lower().endswith(".docx"):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Invalid file type (expected .docx): {path}"
        )

@app.get("/", response_model=dict)
async def root_check():
    return {"status": "API is running"}

@app.post("/extract/title", response_model=dict)
async def extract_title(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        title = await asyncio.to_thread(title_extractor, request.file_path)
        return {"title": title}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting title: {e}"
        )

@app.post("/extract/amendment", response_model=dict)
async def extract_amendment(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        amendment = await asyncio.to_thread(amendment_date_extractor, request.file_path)
        return {"amendment": amendment}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting amendment date: {e}"
        )

@app.post("/extract/age", response_model=dict)
async def extract_age(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        ages = await asyncio.to_thread(age_extractor, request.file_path)
        return {"age": ages}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting age: {e}"
        )

@app.post("/extract/weight", response_model=dict)
async def extract_weight(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        weight_info = await asyncio.to_thread(weight_extractor, request.file_path)
        return {"weight_criteria": weight_info}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting weight criteria: {e}"
        )

@app.post("/extract/participants", response_model=dict)
async def extract_participants(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        participants = await asyncio.to_thread(participant_count_extractor, request.file_path)
        return {"participants": participants}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting participants: {e}"
        )

@app.post("/extract/ratio", response_model=dict)
async def extract_ratio(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        ratios = await asyncio.to_thread(ratio_extractor, request.file_path)
        return {"ratios": ratios}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting ratio: {e}"
        )

@app.post("/extract/therapeutic-area", response_model=dict)
async def extract_therapeutic_area(request: TitleRequest):
    try:
        result = await asyncio.to_thread(therapeutic_area_extractor, request.title)
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting therapeutic area: {e}"
        )

@app.post("/extract/image-text", response_model=dict)
async def extract_image_text(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        folder = await asyncio.to_thread(image_text_extractor, request.file_path)
        return {"image_folder": folder}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting image text: {e}"
        )

@app.post("/extract/arm-cohort-tables", response_model=dict)
async def extract_arm_cohort_tables(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        tables = await asyncio.to_thread(arm_cohort_table_extractor, request.file_path)
        return {"arm_cohort_tables": tables}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting arm/cohort tables: {e}"
        )

@app.post("/extract/inclusion-count", response_model=dict)
async def extract_inclusion_count(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        counts = await asyncio.to_thread(inclusion_count_extractor, request.file_path)
        return {"inclusion_counts": counts}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting inclusion counts: {e}"
        )

@app.post("/extract/exclusion-count", response_model=dict)
async def extract_exclusion_count(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        counts = await asyncio.to_thread(exclusion_count_extractor, request.file_path)
        return {"exclusion_counts": counts}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error extracting exclusion counts: {e}"
        )

@app.post("/extract/full-protocol", response_model=dict)
async def extract_full_protocol(request: FilePathRequest):
    await validate_file_path(request.file_path)
    try:
        data = await asyncio.to_thread(process_protocol, request.file_path)
        return {"protocol_data": data}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error processing protocol: {e}"
        )
